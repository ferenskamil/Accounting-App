"use strict";var _vitest=require("vitest"),_happyDom=require("happy-dom"),_input_handlers=require("./input_handlers.js"),inputHtml='<input type="text" id="account-no" >',window=new _happyDom.Window({}),document=window.document,testInput=(document.write(inputHtml),_vitest.vi.stubGlobal("document",document),document.querySelector("#account-no"));(0,_vitest.describe)("getValueFromInput()",function(){(0,_vitest.beforeEach)(function(){testInput.value=""}),(0,_vitest.test)("should return a string with the value of the input",function(){testInput.value="lorem ipsum";var t=(0,_input_handlers.getValueFromInput)(testInput),e=testInput.value;(0,_vitest.expect)(t).toBe(e)}),(0,_vitest.test)("should return string type",function(){testInput.value="lorem ipsum";var t=(0,_input_handlers.getValueFromInput)(testInput);testInput.value;(0,_vitest.expect)(t).toBeTypeOf("string")})}),(0,_vitest.describe)("setInputMaxLength()",function(){(0,_vitest.beforeEach)(function(){testInput.removeAttribute("maxLength")}),(0,_vitest.test)('should change input "maxLength" attribute to specified value',function(){(0,_input_handlers.setInputMaxLength)(testInput,26);var t=parseInt(testInput.getAttribute("maxLength"));(0,_vitest.expect)(t).toBe(26)})}),(0,_vitest.describe)("outputResultInInput()",function(){(0,_vitest.beforeEach)(function(){testInput.value=""}),(0,_vitest.test)("should change input value for specified value",function(){var t="Lorem ipsum dolor es",e=((0,_input_handlers.outputResultInInput)(testInput,t),testInput.value);(0,_vitest.expect)(e).toBe(t)})}),(0,_vitest.describe)("setCursorInTheRightPlaceOfInput()",function(){(0,_vitest.test)("should move cursor one position right after entering a number",function(){}),(0,_vitest.test)("the character behind cursor should be entered number, when you enter a number",function(){}),(0,_vitest.test)("the input value should not change, when you enter character other than number",function(){}),(0,_vitest.test)("cursors position should not change, when you enter character other than number",function(){})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
