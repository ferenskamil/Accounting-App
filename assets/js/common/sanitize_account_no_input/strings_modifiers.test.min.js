"use strict";var _vitest=require("vitest"),_strings_modifiers=require("./strings_modifiers.js"),_check_space_positions=require("../../utils/check_space_positions.js");(0,_vitest.describe)("insertSpacesIntoString()",function(){(0,_vitest.it)('should thrown error if type of "string" parameter not be a string',function(){var t=[],e={};(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(5,2,4)}).toThrow(),(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(t,2,4)}).toThrow(),(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(e,2,4)}).toThrow(),(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(void 0,2,4)}).toThrow(),(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(!0,2,4)}).toThrow()}),(0,_vitest.it)('should thrown error if type of "firstSplit" parameter not be a number',function(){var t="lorem ipsum dolor es",e=[],i={};(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(t,"5",4)}).toThrow(),(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(t,e,4)}).toThrow(),(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(t,i,4)}).toThrow(),(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(t,void 0,4)}).toThrow(),(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(t,!0,4)}).toThrow()}),(0,_vitest.it)('should thrown error if type of "eachNextSplit" parameter not be a number',function(){var t="lorem ipsum dolor es",e=[],i={};(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(t,2,"4")}).toThrow(),(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(t,2,e)}).toThrow(),(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(t,2,i)}).toThrow(),(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(t,2,void 0)}).toThrow(),(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)(t,2,!0)}).toThrow()}),(0,_vitest.it)('should thrown error if "firstSplit" parameter < 0',function(){(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)("loremipsum",-1,2)}).toThrow()}),(0,_vitest.it)('should not thrown error if "firstSplit" parameter = 0',function(){(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)("loremipsum",0,2)}).not.toThrow()}),(0,_vitest.it)('should thrown error if "eachNextSplit" parameter < 1',function(){(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)("loremipsum",1,0)}).toThrow()}),(0,_vitest.it)('should not thrown error if "eachNextSplit" parameter = 1',function(){(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)("loremipsum",1,1)}).not.toThrow()}),(0,_vitest.it)('should thrown error if "firstSplit" param not be integer',function(){(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)("loremipsum",1.1,2)}).toThrow()}),(0,_vitest.it)('should thrown error if "eachNextSplit" param not be integer',function(){(0,_vitest.expect)(function(){return(0,_strings_modifiers.insertSpacesIntoString)("loremipsum",1,2.5)}).toThrow()}),(0,_vitest.it)('should yield empty string if empty string will be provided as "string" param',function(){var t=(0,_strings_modifiers.insertSpacesIntoString)("",2,4);(0,_vitest.expect)(t).toBe("")}),(0,_vitest.it)('location of the first space in the returned string should depend on the "firstSplit" parameter',function(){var t=(0,_strings_modifiers.insertSpacesIntoString)("loremipsumdolores",2,4).indexOf(" ");(0,_vitest.expect)(t).toBe(2)}),(0,_vitest.it)('location of the consecuitive spaces in the returned string should depend on the "eachNextSplit" parameter',function(){var t=(0,_strings_modifiers.insertSpacesIntoString)("loremipsumdolores",2,4),t=(0,_check_space_positions.checkSpacePositions)(t);(0,_vitest.expect)([2,7,12,17]).toStrictEqual(t)})}),(0,_vitest.describe)("cleanNumberString()",function(){test("should throw an error for parameters other than string",function(){[1,[],{},void 0,!0].forEach(function(t){(0,_vitest.expect)(function(){return(0,_strings_modifiers.cleanNumberString)(t)}).toThrow()})}),test("should not throw an error for string",function(){(0,_vitest.expect)(function(){return(0,_strings_modifiers.cleanNumberString)("lorem")}).not.toThrow()}),test("should clean string from letters",function(){var t=(0,_strings_modifiers.cleanNumberString)("aaa5aaa");(0,_vitest.expect)(t).toBe("5")}),test("should clean string from whitespaces",function(){var t=(0,_strings_modifiers.cleanNumberString)("  12 345 67 89   ");(0,_vitest.expect)(t).toBe("123456789")}),test("should clean string from special characters",function(){var t=(0,_strings_modifiers.cleanNumberString)("~`!@#$%^&*()-_=+{}[]|/:;<>,.?'\\");(0,_vitest.expect)(t).toBe("")}),test("should output be a string",function(){var t=(0,_strings_modifiers.cleanNumberString)("123456789");(0,_vitest.expect)(t).toBeTypeOf("string")}),test("should output contains only digits for length > 0",function(){var t=(0,_strings_modifiers.cleanNumberString)("123456789"),e=parseInt(t).toString();(0,_vitest.expect)(t).toBe(e)})}),(0,_vitest.describe)("sanitizeAccountNo()",function(){test("should return string of 26 digits consistent with the bank account number format for 26 digits number string",function(){var t=(0,_strings_modifiers.sanitizeAccountNo)("11222233334444555566667777");(0,_vitest.expect)(t).toBe("11 2222 3333 4444 5555 6666 7777")}),test("should return string of <26 digits consistent with the bank account number format for <26 numberstring ",function(){var t=(0,_strings_modifiers.sanitizeAccountNo)("112222333344445555666");(0,_vitest.expect)(t).toBe("11 2222 3333 4444 5555 666")}),test("should return string of 26 digits consistent with the bank account number format for >26 numberstring ",function(){var t=(0,_strings_modifiers.sanitizeAccountNo)("112222333344445555666677778888");(0,_vitest.expect)(t).toBe("11 2222 3333 4444 5555 6666 7777")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
