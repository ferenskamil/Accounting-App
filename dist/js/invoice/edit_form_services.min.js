const changeValueInHiddenInput=(e,t)=>{document.querySelector(t).value=e},parseAmountToCount=e=>("string"==typeof e&&(e=e.replace(",","."),e=parseFloat(e)),e%1==0&&(e=e.toFixed(2),e=parseFloat(e)),e),convertNumtoAmount=(e,t)=>(e=e.toFixed(2),e=(e+=" "+t).replace(".",",")),addNewServiceBtn=document.querySelector(".new-service-btn"),createNewService=e=>{e.preventDefault();var e=document.querySelector("#services-table tbody"),t=e.querySelectorAll("tr").length,n=document.createElement("tr"),a=document.createElement("td"),r=(a.innerHTML=`<span class="service-title--mobile">No.: </span><span class="service-item-number"></span>
<input hidden class="position-hidden-input" type="text" name="position[${t}]" value=""></input>`,document.createElement("td")),s=(r.innerHTML=`<span class="service-title--mobile">Item / service: </span>
<input class="service-item-name"  type="text" name="service_name[${t}]">`,document.createElement("td")),l=(s.innerHTML=`<span class="service-title--mobile">Service code: </span>
<input class="service-item-code" type="text" name="service_code[${t}]">`,document.createElement("td")),i=(l.innerHTML=`<span class="service-title--mobile">Quantity: </span>
<input type="number" value="1" min="0" class="service-item-amount" name="quantity[${t}]">`,document.createElement("td")),c=(i.innerHTML=`<span class="service-title--mobile">Net price (PLN): </span>
<input type="number" min="0" value="0.00" class="service-item-net-value" name="item_net_price[${t}]" step=".01">`,document.createElement("td")),o=(c.innerHTML=`<span class="service-title--mobile">Tax: </span>
<select class="service-item-tax" name="service_tax[${t}]">
	<option value="0">tax-free</option>
	<option value="0.08">8%</option>
	<option value="0.23">23%</option>
</select>`,document.createElement("td")),u=(o.innerHTML=`<span class="service-title--mobile">Net sum (PLN): </span>
<input type="text" value="0.00 PLN" class="service-item-net-sum" name="service_total_net[${t}]" readonly>`,document.createElement("td")),t=(u.innerHTML=`<span class="service-title--mobile">Gross sum (PLN): </span>
<input type="text" value="0.00 PLN" class="service-item-gross-sum" name="service_total_gross[${t}]" readonly>`,document.createElement("td"));t.innerHTML=`<button class="delete-btn">
<i class="fa-solid fa-trash"></i>Delete</button>`,n.append(a,r,s,l,i,c,o,u,t),e.append(n),updateServicesTable()},updateServiceTr=(addNewServiceBtn.addEventListener("click",e=>createNewService(e)),e=>{var t=e.querySelector(".service-item-amount").value,n=e.querySelector(".service-item-net-value").value,a=e.querySelector(".service-item-tax").value,r=e.querySelector(".service-item-net-sum"),e=e.querySelector(".service-item-gross-sum"),t=(r.value=convertNumtoAmount(t*n,"PLN"),parseAmountToCount(a)*parseAmountToCount(r.value)+parseAmountToCount(r.value));e.value=convertNumtoAmount(t,"PLN"),calculateTableSummary()}),deleteServiceItem=(document.addEventListener("input",e=>{(e.target.classList.contains("service-item-amount")||e.target.classList.contains("service-item-net-value")||e.target.classList.contains("service-item-tax"))&&updateServiceTr(e.target.parentElement.parentElement)}),e=>{e.outerHTML="",updateServicesTable()}),updateServicesTable=(document.addEventListener("click",e=>{e.target.classList.contains("delete-btn")&&deleteServiceItem(e.target.parentElement.parentElement)}),document.addEventListener("keydown",e=>{"Enter"===e.key&&"textarea"!==e.target.localName&&e.preventDefault()}),()=>{updateItemsNumbers(),showEmptyInfo(),calculateTableSummary()}),updateItemsNumbers=()=>{var t=document.querySelectorAll(".invoice-edit__form-box-services-table .service-item-number"),n=document.querySelectorAll(".position-hidden-input");for(let e=0;e<t.length;e++)t[e].textContent=e+1;for(let e=0;e<n.length;e++)n[e].value=e+1},showEmptyInfo=()=>{var e=document.querySelectorAll("#services-table tbody tr");document.querySelector("#services-table tbody .empty-info").style.display=1===e.length?"grid":"none"},calculateTableSummary=()=>{sumUpValues(".service-item-net-sum",".invoice-total-net"),sumUpValues(".service-item-gross-sum",".invoice-total-gross")},sumUpValues=(e,t)=>{e=document.querySelectorAll(e),t=document.querySelector(t);let n=0;e.forEach(e=>{n+=parseFloat(e.value.replace(",","."))}),t.textContent=(n.toFixed(2)+" PLN").replace(".",","),updateAllHiddenInputValues()},updateAllHiddenInputValues=()=>{var e=document.querySelector(".invoice-total-gross"),e=parseAmountToCount(e.textContent),t=document.querySelector(".invoice-total-net"),t=parseAmountToCount(t.textContent);changeValueInHiddenInput(e,"#total-gross"),changeValueInHiddenInput(e,"#to-pay-numeric"),changeValueInHiddenInput(verbalNotation(e),"#to-pay-verbal"),changeValueInHiddenInput(t,"#total-net")};document.addEventListener("DOMContentLoaded",updateServicesTable);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
